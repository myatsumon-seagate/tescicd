{"version":3,"sources":["logo.svg","CustomerDetails.js","Customers.js","App.js","registerServiceWorker.js","index.js"],"names":["CustomerDetails","props","state","this","getCustomerDetails","val","prevProps","id","axios","get","then","response","setState","customerDetails","className","bsStyle","Heading","Title","componentClass","data","name","Body","email","phone","city","country","organization","jobProfile","additionalInfo","Component","Customers","selectedCustomer","getCustomerData","customerList","map","customer","onClick","App","console","log","basename","process","src","logo","alt","Switch","Route","exact","path","render","Redirect","to","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","document","getElementById","URL","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9228c7e5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {Component} from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport axios from 'axios'\n\n//This Component is a child Component of Customers Component\nexport default class CustomerDetails extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  //Function which is called when the component loads for the first time\n  componentDidMount() {\n    this.getCustomerDetails(this.props.val)\n  }\n\n  //Function which is called whenver the component is updated\n  componentDidUpdate(prevProps) {\n\n    //get Customer Details only if props has changed\n    if (this.props.val !== prevProps.val) {\n      this.getCustomerDetails(this.props.val)\n    }\n  }\n\n  //Function to Load the customerdetails data from json.\n  getCustomerDetails(id) {\n    axios.get('assets/samplejson/customer' + id + '.json').then(response => {\n      this.setState({customerDetails: response})\n    })\n  };\n\n  render() {\n    if (!this.state.customerDetails)\n      return (<p>Loading Data</p>)\n    return (<div className=\"customerdetails\">\n      <Panel bsStyle=\"info\" className=\"centeralign\">\n        <Panel.Heading>\n          <Panel.Title componentClass=\"h3\">{this.state.customerDetails.data.name}</Panel.Title>\n        </Panel.Heading>\n        <Panel.Body>\n          <p>Name : {this.state.customerDetails.data.name}</p>\n          <p>Email : {this.state.customerDetails.data.email}</p>\n          <p>Phone : {this.state.customerDetails.data.phone}</p>\n          <p>City : {this.state.customerDetails.data.city}</p>\n          <p>State : {this.state.customerDetails.data.state}</p>\n          <p>Country : {this.state.customerDetails.data.country}</p>\n          <p>Organization : {this.state.customerDetails.data.organization}</p>\n          <p>Job Profile : {this.state.customerDetails.data.jobProfile}</p>\n          <p>Additional Info : {this.state.customerDetails.data.additionalInfo}</p>\n        </Panel.Body>\n      </Panel>\n    </div>)\n  }\n}\n","import React, {Component} from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport Button from 'react-bootstrap/lib/Button'\nimport CustomerDetails from './CustomerDetails'\nimport axios from 'axios'\n\nexport default class Customers extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedCustomer: 1\n    }\n  }\n\n  //function which is called the first time the component loads\n  componentDidMount() {\n    this.getCustomerData();\n  }\n\n  //Function to get the Customer Data from json\n  getCustomerData() {\n    axios.get('assets/samplejson/customerlist.json').then(response => {\n      this.setState({customerList: response})\n    })\n  };\n\n  render() {\n    if (!this.state.customerList)\n      return (<p>Loading data</p>)\n    return (<div className=\"addmargin\">\n      <div className=\"col-md-3\">\n        {\n\n          this.state.customerList.data.map(customer => <Panel bsStyle=\"info\" key={customer.name} className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">{customer.name}</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n              <p>{customer.email}</p>\n              <p>{customer.phone}</p>\n              <Button bsStyle=\"info\" onClick={() => this.setState({selectedCustomer: customer.id})}>\n\n                Click to View Details\n\n              </Button>\n\n            </Panel.Body>\n          </Panel>)\n        }\n      </div>\n      <div className=\"col-md-6\">\n        <CustomerDetails val={this.state.selectedCustomer}/>\n      </div>\n    </div>)\n  }\n\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Customers from './Customers';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\nclass App extends Component {\n\trender() {\n\t\tconsole.log('Host URL' + process.env.PUBLIC_URL);\n\t\treturn (\n\t\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t\t<h1 className=\"App-title\">Sample React App CI/CD</h1>\n\t\t\t\t\t</header>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\" render={() => <Redirect to=\"/customerlist\" />} />\n\t\t\t\t\t\t<Route exact path=\"/customerlist\" component={Customers} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}